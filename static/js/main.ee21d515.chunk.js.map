{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","ToDoList.tsx","Router.tsx","App.tsx","index.tsx"],"names":["Categories","LocalStorage","loadToDos","localStorage","getItem","ID","toDoState","atom","key","default","JSON","parse","categoryState","TO_DO","toDoSelector","selector","get","toDos","console","log","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","toDosInfo","text","id","Date","now","setItem","stringify","required","placeholder","ToDo","addToDos","newCategory","targetIndex","findIndex","targetToDo","newToDo","slice","DOING","onClick","DONE","ToDoList","useRecoilState","setCategory","value","onInput","event","currentTarget","map","Router","basename","process","path","element","GlobalStyle","createGlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee21d515.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\nexport enum Categories {\r\n  \"TO_DO\" = \"TO_DO\",\r\n  \"DOING\" = \"DOING\",\r\n  \"DONE\" = \"DONE\",\r\n}\r\n\r\nexport enum LocalStorage {\r\n  \"ID\" = \"TODOS\",\r\n}\r\n\r\nexport interface IToDo {\r\n  text: string;\r\n  id: number;\r\n  category: Categories;\r\n}\r\n\r\nconst loadToDos = localStorage.getItem(LocalStorage.ID);\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: \"toDo\",\r\n  default: JSON.parse(loadToDos as any) || [],\r\n});\r\n\r\nexport const categoryState = atom<Categories>({\r\n  key: \"category\",\r\n  default: Categories.TO_DO,\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n  key: \"toDoSelector\",\r\n  get: ({ get }) => {\r\n    const toDos = get(toDoState);\r\n    console.log(toDos);\r\n    const category = get(categoryState);\r\n    console.log(categoryState);\r\n    return toDos.filter((toDo) => toDo.category === category);\r\n  },\r\n});\r\n","import { useForm } from \"react-hook-form\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { categoryState, LocalStorage, toDoState } from \"../atoms\";\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const category = useRecoilValue(categoryState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const handleValid = ({ toDo }: IForm) => {\r\n    setToDos((oldToDos) => {\r\n      const toDosInfo = [{ text: toDo, id: Date.now(), category }, ...oldToDos];\r\n      localStorage.setItem(LocalStorage.ID, JSON.stringify(toDosInfo));\r\n      return toDosInfo;\r\n    });\r\n    setValue(\"toDo\", \"\"); // 글자를 비워줌!\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit(handleValid)}>\r\n      <input\r\n        {...register(\"toDo\", {\r\n          required: \"Please write a To Do\",\r\n        })}\r\n        placeholder=\"Write a to do\"\r\n      />\r\n      <button>Add</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CreateToDo;\r\n","import React from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { Categories, IToDo, LocalStorage, toDoState } from \"../atoms\";\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const addToDos = (newCategory: IToDo[\"category\"]) => {\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      const targetToDo = { text, id, category: newCategory };\r\n      const newToDo = [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        targetToDo,\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n      localStorage.setItem(LocalStorage.ID, JSON.stringify(newToDo));\r\n      return newToDo;\r\n    }); // 값을 즉시변경\r\n  };\r\n  const deleteToDos = () => {\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      const newToDo = [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n      localStorage.setItem(LocalStorage.ID, JSON.stringify(newToDo));\r\n      return newToDo;\r\n    }); // 값을 즉시변경\r\n  };\r\n  return (\r\n    <li>\r\n      <span>{text}</span>\r\n      {category !== Categories.DOING && (\r\n        <button onClick={() => addToDos(Categories.DOING)}>Doing</button>\r\n      )}\r\n      {category !== Categories.TO_DO && (\r\n        <button onClick={() => addToDos(Categories.TO_DO)}>ToDo</button>\r\n      )}\r\n      {category !== Categories.DONE && (\r\n        <button onClick={() => addToDos(Categories.DONE)}>Done</button>\r\n      )}\r\n      <button onClick={() => deleteToDos()}>Delete</button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { Categories, categoryState, toDoSelector } from \"./atoms\";\r\nimport CreateToDo from \"./components/CreateToDo\";\r\nimport ToDo from \"./components/ToDo\";\r\n\r\nfunction ToDoList() {\r\n  const toDos = useRecoilValue(toDoSelector);\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    setCategory(event?.currentTarget.value as any);\r\n  };\r\n  // const [toDos, setToDos] = useRecoilState(toDoState); // like useState(value, modFn)\r\n  // const value = useRecoilValue(toDoState);\r\n  // const modFn = useSetRecoilState(toDoState); // modifier(value를 변경하는 경우), atom의 값을 변경\r\n  return (\r\n    <div>\r\n      <h1>To Dos</h1>\r\n      <hr />\r\n      <select value={category} onInput={onInput}>\r\n        <option value={Categories.TO_DO}>To Do</option>\r\n        <option value={Categories.DOING}>Doing</option>\r\n        <option value={Categories.DONE}>Done</option>\r\n      </select>\r\n      <CreateToDo />\r\n      {toDos?.map((toDo) => (\r\n        <ToDo key={toDo.id} {...toDo} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport TodoList from \"./ToDoList\";\r\n\r\nfunction Router() {\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <Routes>\r\n        <Route path=\"/\" element={<TodoList />}></Route>\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default Router;\r\n","import React from \"react\";\r\nimport Router from \"./Router\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Router />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <App />\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}